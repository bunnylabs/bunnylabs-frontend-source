@import <Foundation/Foundation.j>
@import <AppKit/AppKit.j>

@import "TextFieldWithLabel.j"

var LOGIN_STATE = 1;
var REGISTRATION_STATE = 2;
var FORGOTPASSWORD_STATE = 3;
var CHANGEPASSWORD_STATE = 4;
var LOGOUT_STATE = 5;
var WAITING_STATE = 6;

var MINIMUM_USERNAME_LENGTH = 4;
var MINIMUM_PASSWORD_LENGTH = 8;
var EMAIL_REGEX = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

var WIDE_MODE_WIDTH = 500;
var NARROW_MODE_WIDTH = 300;

@implementation SessionWindow : CPBox
{
	id delegate @accessors;
	CPString title @accessors;
	CPButton defaultButton @accessors;

	CPInteger currentState;

	CPTextField messageField;
	CPTextField errorField;

	TextFieldWithLabel usernameField;
	TextFieldWithLabel passwordField;
	TextFieldWithLabel passwordConfirmField;
	TextFieldWithLabel emailField;

	CPButton loginButton;
	CPButton newAccountButton;
	CPButton forgotPasswordButton;
	CPButton registerButton;
	CPButton submitUsernameButton;
	CPButton cancelButton;
	CPButton changePasswordButton;
	CPButton logoutButton;

	CPImageView spinnerView;

	int messageSize;

	CPSet errors;
	CPString message;

	CPString customMessage @accessors;
	CPString customError @accessors;

	int LOGIN_BOX_WIDTH;
}

-(id)init
{
	self = [super init];
	if (self)
	{
		errors = [[CPSet alloc] init];
		customMessage = "";
		customError = "";
		LOGIN_BOX_WIDTH = WIDE_MODE_WIDTH;

		[self setFrame:CGRectMake(0,0,LOGIN_BOX_WIDTH,100)];
		[self center];
		[self setFrameOrigin:CGPointMake([self frame].origin.x,[self frame].origin.y-50)];


		messageField = [[CPTextField alloc] initWithFrame:CGRectMake(0,0,100,40)];
		[messageField setLineBreakMode:CPLineBreakByWordWrapping];
		[messageField setBackgroundColor:[CPColor colorWithCalibratedRed:103.0 / 255.0 green:154.0 / 255.0 blue:205.0 / 255.0 alpha:1.0]];
		[messageField setTextColor:[CPColor whiteColor]];
		[messageField setValue:CGInsetMake(9.0, 9.0, 9.0, 9.0) forThemeAttribute:@"content-inset"];
		[self addSubview:messageField];


		errorField = [[CPTextField alloc] initWithFrame:CGRectMake(0,0,100,0)];
		[errorField setLineBreakMode:CPLineBreakByWordWrapping];
		[errorField setBackgroundColor:[CPColor colorWithHexString:"993333"]];
		[errorField setTextColor:[CPColor whiteColor]];
		[errorField setValue:CGInsetMake(9.0, 9.0, 9.0, 9.0) forThemeAttribute:@"content-inset"];
		[self addSubview:errorField];

		loginButton = [CPButton buttonWithTitle:"<%= t(:login) %>"];
		[loginButton setFrame:CGRectMake(10,180,185,[loginButton bounds].size.height)];
		[loginButton setTarget:self];
		[loginButton setAction:@selector(loginButtonClicked:)];
		[self addSubview:loginButton];

		newAccountButton = [CPButton buttonWithTitle:"<%= t(:create_new_account) %>"];
		[newAccountButton setFrame:CGRectMake(10,180,185,[newAccountButton bounds].size.height)];
		[newAccountButton setTarget:self];
		[newAccountButton setAction:@selector(newAccountButtonClicked:)];
		[self addSubview:newAccountButton];

		forgotPasswordButton = [CPButton buttonWithTitle:"<%= t(:forgot_password) %>"];
		[forgotPasswordButton setFrame:CGRectMake(10,180,185,[forgotPasswordButton bounds].size.height)];
		[forgotPasswordButton setTarget:self];
		[forgotPasswordButton setAction:@selector(forgotPasswordButtonClicked:)];
		[self addSubview:forgotPasswordButton];

		registerButton = [CPButton buttonWithTitle:"<%= t(:confirm_register_details) %>"];
		[registerButton setFrame:CGRectMake(10,180,185,[registerButton bounds].size.height)];
		[registerButton setTarget:self];
		[registerButton setAction:@selector(registerButtonClicked:)];
		[self addSubview:registerButton];

		changePasswordButton = [CPButton buttonWithTitle:"<%= t(:confirm_new_password) %>"];
		[changePasswordButton setFrame:CGRectMake(10,180,185,[changePasswordButton bounds].size.height)];
		[changePasswordButton setTarget:self];
		[changePasswordButton setAction:@selector(changePasswordButtonClicked:)];
		[self addSubview:changePasswordButton];

		submitUsernameButton = [CPButton buttonWithTitle:"<%= t(:send_recovery_email) %>"];
		[submitUsernameButton setFrame:CGRectMake(10,180,185,[submitUsernameButton bounds].size.height)];
		[submitUsernameButton setTarget:self];
		[submitUsernameButton setAction:@selector(submitUsernameButtonClicked:)];
		[self addSubview:submitUsernameButton];


		logoutButton = [CPButton buttonWithTitle:"<%= t(:logout) %>"];
		[logoutButton setFrame:CGRectMake(10,180,185,[logoutButton bounds].size.height)];
		[logoutButton setTarget:self];
		[logoutButton setAction:@selector(logoutButtonClicked:)];
		[self addSubview:logoutButton];


		cancelButton = [CPButton buttonWithTitle:"<%= t(:cancel) %>"];
		[cancelButton setFrame:CGRectMake(205,180,185,[cancelButton bounds].size.height)];
		[cancelButton setTarget:self];
		[cancelButton setAction:@selector(cancelButtonClicked:)];
		[self addSubview:cancelButton];


		usernameField = [[TextFieldWithLabel alloc] initWithLabel:"<%= t(:username) %>:" 
													   andPlaceHolder:"<%= t(:username) %>" 
															 andWidth:LOGIN_BOX_WIDTH - 20];
		[usernameField setFrameOrigin:CGPointMake(10,20)];
		[usernameField setTarget:self];
		[usernameField setTextChangedSelector:@selector(textChanged:)];
		[self addSubview:usernameField];

		passwordField = [[TextFieldWithLabel alloc] initWithLabel:"<%= t(:password) %>:" 
													   andPlaceHolder:"<%= t(:password) %>" 
															 andWidth:LOGIN_BOX_WIDTH - 20 
															 isSecure:YES];
		[passwordField setFrameOrigin:CGPointMake(10,50)];
		[passwordField setTarget:self];
		[passwordField setTextChangedSelector:@selector(textChanged:)];
		[self addSubview:passwordField];

		passwordConfirmField = [[TextFieldWithLabel alloc] initWithLabel:"<%= t(:password_again) %>:" 
															  andPlaceHolder:"<%= t(:password_again) %>" 
																	andWidth:LOGIN_BOX_WIDTH - 20 isSecure:YES];
		[passwordConfirmField setFrameOrigin:CGPointMake(10,80)];
		[passwordConfirmField setTarget:self];
		[passwordConfirmField setTextChangedSelector:@selector(textChanged:)];
		[self addSubview:passwordConfirmField];

		emailField = [[TextFieldWithLabel alloc] initWithLabel:"<%= t(:email) %>:" 
													andPlaceHolder:"<%= t(:email) %>" 
														  andWidth:LOGIN_BOX_WIDTH - 20];
		[emailField setFrameOrigin:CGPointMake(10,110)];
		[emailField setTarget:self];
		[emailField setTextChangedSelector:@selector(textChanged:)];
		[self addSubview:emailField];

		var spinner = [[CPImage alloc] initWithContentsOfFile:
				[[CPBundle mainBundle] pathForResource:"spinner.gif"]
												  size:CGSizeMake(20,20)
			];
		[spinner setDelegate:self];
		spinnerView = [[CPImageView alloc] init];
		[spinnerView setImage:spinner];
		[spinnerView setHidden:YES];
		[spinnerView setFrame:CGRectMake(LOGIN_BOX_WIDTH,400,60,60)];

		[self addSubview:spinnerView];

		messageSize = 0;



		[self setState:LOGIN_STATE];
	}
	return self;
}

-(void)updateForScreenWidth:(int)width
{

	if ( width < WIDE_MODE_WIDTH )
	{
		LOGIN_BOX_WIDTH = NARROW_MODE_WIDTH;
	}
	else
	{
		LOGIN_BOX_WIDTH = WIDE_MODE_WIDTH;
	}

	[usernameField setFrame:CGRectMake([usernameField frame].origin.x,
										[usernameField frame].origin.y,
										LOGIN_BOX_WIDTH - 20,
										[usernameField frame].size.height)];

	[passwordField setFrame:CGRectMake([passwordField frame].origin.x,
										[passwordField frame].origin.y,
										LOGIN_BOX_WIDTH - 20,
										[passwordField frame].size.height)];

	[passwordConfirmField setFrame:CGRectMake([passwordConfirmField frame].origin.x,
										[passwordConfirmField frame].origin.y,
										LOGIN_BOX_WIDTH - 20,
										[passwordConfirmField frame].size.height)];

	[emailField setFrame:CGRectMake([emailField frame].origin.x,
										[emailField frame].origin.y,
										LOGIN_BOX_WIDTH - 20,
										[emailField frame].size.height)];

	[self _update];

}

-(CPString)username
{
	return [usernameField text];
}

-(CPString)password
{
	return [passwordField text];
}

-(CPString)email
{
	return [emailField text];
}

-(id)loginButtonClicked:(id)sender
{
	if ([[self delegate] respondsToSelector:@selector(loginButtonClicked:)])
	{
		[[self delegate] loginButtonClicked:self];
	}
	return sender;
}

-(id)registerButtonClicked:(id)sender
{
	if ([[self delegate] respondsToSelector:@selector(registerButtonClicked:)])
	{
		[[self delegate] registerButtonClicked:self];
	}
	return sender;
}

-(id)changePasswordButtonClicked:(id)sender
{
	if ([[self delegate] respondsToSelector:@selector(changePasswordButtonClicked:)])
	{
		[[self delegate] changePasswordButtonClicked:self];
	}
	return sender;
}

-(id)submitUsernameButtonClicked:(id)sender
{
	if ([[self delegate] respondsToSelector:@selector(submitUsernameButtonClicked:)])
	{
		[[self delegate] submitUsernameButtonClicked:self];
	}
	return sender;
}

-(id)logoutButtonClicked:(id)sender
{
	if ([[self delegate] respondsToSelector:@selector(logoutButtonClicked:)])
	{
		[[self delegate] logoutButtonClicked:self];
	}
	return sender;
}

-(id)cancelButtonClicked:(id)sender
{
	[self removeFromSuperview];
	return sender;
}

-(id)newAccountButtonClicked:(id)sender
{
	[self setState:REGISTRATION_STATE];
	return sender;
}

-(id)forgotPasswordButtonClicked:(id)sender
{
	[self setState:FORGOTPASSWORD_STATE];
	return sender;
}

-(BOOL)usernameIsValid:(CPString)username
{
	if (username.length < MINIMUM_USERNAME_LENGTH)
	{
		[errors addObject: [CPString stringWithFormat:"<%= t(:error_username_at_least) %>", MINIMUM_USERNAME_LENGTH]];
		return NO;
	}
	[errors removeObject: [CPString stringWithFormat:"<%= t(:error_username_at_least) %>", MINIMUM_USERNAME_LENGTH]];
	return YES;
}

-(BOOL)passwordIsValid:(CPString)password
{
	if (password.length < MINIMUM_PASSWORD_LENGTH)
	{
		[errors addObject: [CPString stringWithFormat:"<%= t(:error_password_at_least) %>", MINIMUM_PASSWORD_LENGTH]];
		return NO;
	}
	[errors removeObject: [CPString stringWithFormat:"<%= t(:error_password_at_least) %>", MINIMUM_PASSWORD_LENGTH]];
	return YES;
}

-(BOOL)passwordsMatch:(CPString)password
{
	if (password !== [passwordField text])
	{
		[errors addObject: "<%= t(:error_password_does_not_match) %>"];
		return NO;
	}

	[errors removeObject: "<%= t(:error_password_does_not_match) %>"];
	return YES;
}

-(BOOL)emailIsValid:(CPString)email
{
	if (!EMAIL_REGEX.test(email))
	{
		[errors addObject: "<%= t(:error_email_not_valid) %>"];
		return NO;
	}
	[errors removeObject: "<%= t(:error_email_not_valid) %>"];
	return YES;
}

-(void)setMessage:(CPString)aMessage
{
	[messageField setStringValue:aMessage];
}

-(void)setError:(CPString)anErrorMessage
{
	[errorField setStringValue:anErrorMessage];
}

-(CPString)_getPasswordRules
{
	var rules = [
					"<%= t(:password_rule_1) %>",
					"<%= t(:password_rule_2) %>",
					"<%= t(:password_rule_3) %>",
					"<%= t(:password_rule_4) %>",
					"<%= t(:password_rule_5) %>"
					];
	var ruleString = "";
	for (var i=0; i<rules.length; i++)
	{
		ruleString += "\n• " + rules[i];
	}
	return ruleString;
}

-(void)setState:(CPInteger)state
{
	if (state == WAITING_STATE)
	{
		[self setState:state andResetFields:NO];
	}
	else
	{
		[self setState:state andResetFields:YES];
	}
}

-(void)setState:(CPInteger)state andResetFields:(BOOL)eraseAllFields
{

	[errors removeAllObjects];

	if (eraseAllFields)
	{
		[usernameField setText:""];
		[passwordField setText:""];
		[passwordConfirmField setText:""];
		[emailField setText:""];
	}

	customMessage = "";
	customError = "";

	currentState = state;

	switch(currentState)
	{
		case LOGIN_STATE:
			message = "";

			[usernameField setValidator:nil];
			[passwordField setValidator:nil];
			[passwordConfirmField setValidator:nil];
			[emailField setValidator:nil];

			break;

		case REGISTRATION_STATE:
			message = "<%= t(:registration_screen_message) %>\n" + [self _getPasswordRules];

			[usernameField setValidator:@selector(usernameIsValid:)];
			[passwordField setValidator:@selector(passwordIsValid:)];
			[passwordConfirmField setValidator:@selector(passwordsMatch:)];
			[emailField setValidator:@selector(emailIsValid:)];

			break;

		case FORGOTPASSWORD_STATE:
			message = "<%= t(:forgot_password_screen_message) %>";

			[usernameField setValidator:@selector(usernameIsValid:)];
			[passwordField setValidator:nil];
			[passwordConfirmField setValidator:nil];
			[emailField setValidator:@selector(emailIsValid:)];

			break;

		case CHANGEPASSWORD_STATE:
		
			message = "<%= t(:change_password_screen_message) %>.\n" + [self _getPasswordRules];

			[usernameField setValidator:nil];
			[passwordField setValidator:@selector(passwordIsValid:)];
			[passwordConfirmField setValidator:@selector(passwordsMatch:)];
			[emailField setValidator:nil];

			break;

		case LOGOUT_STATE:
			message = "";

			[usernameField setValidator:nil];
			[passwordField setValidator:nil];
			[passwordConfirmField setValidator:nil];
			[emailField setValidator:nil];

			break;

		case WAITING_STATE:

			message = "";

			[usernameField setValidator:nil];
			[passwordField setValidator:nil];
			[passwordConfirmField setValidator:nil];
			[emailField setValidator:nil];

			break;
	}

	[self _update];
}

-(void)textChanged:(TextFieldWithLabel)label
{
	[self _update];
}

-(void)update
{
	[self _update];
}

-(void)_update
{
	[usernameField validate];
	[passwordField validate];
	[passwordConfirmField validate];
	[emailField validate];

	var errorStrings = [errors allObjects];
	if (customError.length > 0)
	{
		errorStrings = [errorStrings arrayByAddingObject:customError];
	}

	var errorString = [errorStrings componentsJoinedByString:"\n"];
	[self setError:errorString];


	var messageStrings = [ ];

	if (message.length > 0)
	{
		messageStrings = [messageStrings arrayByAddingObject:message];
	}

	if (customMessage.length > 0)
	{
		messageStrings = [messageStrings arrayByAddingObject:customMessage];
	}

	var messageString = [messageStrings componentsJoinedByString:"\n"];
	[self setMessage:messageString];


	var targetWidth = [self frame].size.width;
	var targetHeight = [self frame].size.height;

	var messageFieldSize = {width: LOGIN_BOX_WIDTH, height: 0};
	if (messageString && messageString.length > 0)
	{
		messageFieldSize = [messageString sizeWithFont:[messageField font] inWidth:LOGIN_BOX_WIDTH];
		[messageField setFrame:CGRectMake(0, 0, LOGIN_BOX_WIDTH, messageFieldSize.height + 18)];
	}
	else
	{
		[messageField setFrame:CGRectMake(0, 0, LOGIN_BOX_WIDTH, 0)];
	}

	var errorFieldSize = {width: LOGIN_BOX_WIDTH, height: 0};
	if ([errorField stringValue] && [errorField stringValue].length > 0)
	{
		errorFieldSize = [[errorField stringValue] sizeWithFont:[errorField font] inWidth:LOGIN_BOX_WIDTH];

		[errorField setFrame:CGRectMake(0, [messageField frame].size.height, LOGIN_BOX_WIDTH, errorFieldSize.height + 18)];
	}
	else
	{
		[errorField setFrame:CGRectMake(0, [messageField frame].size.height, LOGIN_BOX_WIDTH, 0)];
	}

	messageSize = [messageField frame].size.height + [errorField frame].size.height;

	switch(currentState)
	{
		case LOGIN_STATE:

			[self setTitle:"<%= t(:login) %>"];

			[usernameField setHidden:NO];
			[passwordField setHidden:NO];
			[passwordConfirmField setHidden:YES];
			[emailField setHidden:YES];
			[registerButton setHidden:YES];
			[submitUsernameButton setHidden:YES];
			[newAccountButton setHidden:NO];
			[forgotPasswordButton setHidden:NO];
			[loginButton setHidden:NO];
			[changePasswordButton setHidden:YES];
			[cancelButton setHidden:NO];
			[spinnerView setHidden:YES];
			[logoutButton setHidden:YES];

			[usernameField setFrameOrigin:CGPointMake(10,10 + messageSize)];
			[passwordField setFrameOrigin:CGPointMake(10,40 + messageSize)];

			[loginButton setFrame:CGRectMake(10, 80 + messageSize, (LOGIN_BOX_WIDTH - 30) / 2, [loginButton bounds].size.height)];
			[cancelButton setFrame:CGRectMake(LOGIN_BOX_WIDTH / 2 + 5, 80 + messageSize, (LOGIN_BOX_WIDTH - 30) / 2, [cancelButton bounds].size.height)];

			[newAccountButton setFrame:CGRectMake(10, 110 + messageSize, (LOGIN_BOX_WIDTH - 30) / 2, [loginButton bounds].size.height)];
			[forgotPasswordButton setFrame:CGRectMake(LOGIN_BOX_WIDTH / 2 + 5, 110 + messageSize, (LOGIN_BOX_WIDTH - 30) / 2, [cancelButton bounds].size.height)];


			[self setDefaultButton: loginButton];

			targetWidth = LOGIN_BOX_WIDTH;
			targetHeight = 145 + messageSize;

			break;

		case REGISTRATION_STATE:

			[self setTitle:"<%= t(:create_new_account) %>"];

			[usernameField setHidden:NO];
			[passwordField setHidden:NO];
			[passwordConfirmField setHidden:NO];
			[emailField setHidden:NO];
			[registerButton setHidden:NO];
			[submitUsernameButton setHidden:YES];
			[newAccountButton setHidden:YES];
			[forgotPasswordButton setHidden:YES];
			[loginButton setHidden:YES];
			[changePasswordButton setHidden:YES];
			[cancelButton setHidden:NO];
			[spinnerView setHidden:YES];
			[logoutButton setHidden:YES];

			[usernameField setFrameOrigin:CGPointMake(10,10 + messageSize)];
			[passwordField setFrameOrigin:CGPointMake(10,40 + messageSize)];

			[passwordConfirmField setFrameOrigin:CGPointMake(10,70 + messageSize)];
			[emailField setFrameOrigin:CGPointMake(10,100 + messageSize)];

			[registerButton setFrame:CGRectMake(10, 140 + messageSize,(LOGIN_BOX_WIDTH - 30) / 2, [loginButton bounds].size.height)];
			[cancelButton setFrame:CGRectMake(LOGIN_BOX_WIDTH / 2 + 5, 140 + messageSize,(LOGIN_BOX_WIDTH - 30) / 2, [cancelButton bounds].size.height)];

			[self setDefaultButton: registerButton];


			targetWidth = LOGIN_BOX_WIDTH;
			targetHeight = 175 + messageSize;

			break;

		case FORGOTPASSWORD_STATE:

			[self setTitle:"<%= t(:forgot_password) %>"];

			[usernameField setHidden:NO];
			[passwordField setHidden:YES];
			[passwordConfirmField setHidden:YES];
			[emailField setHidden:NO];
			[registerButton setHidden:YES];
			[submitUsernameButton setHidden:NO];
			[newAccountButton setHidden:YES];
			[forgotPasswordButton setHidden:YES];
			[loginButton setHidden:YES];
			[changePasswordButton setHidden:YES];
			[cancelButton setHidden:NO];
			[spinnerView setHidden:YES];
			[logoutButton setHidden:YES];

			[usernameField setFrameOrigin:CGPointMake(10,10 + messageSize)];
			[emailField setFrameOrigin:CGPointMake(10,40 + messageSize)];

			[submitUsernameButton setFrame:CGRectMake(10, 80 + messageSize,(LOGIN_BOX_WIDTH - 30) / 2, [loginButton bounds].size.height)];
			[cancelButton setFrame:CGRectMake(LOGIN_BOX_WIDTH / 2 + 5, 80 + messageSize,(LOGIN_BOX_WIDTH - 30) / 2, [cancelButton bounds].size.height)];

			[self setDefaultButton: submitUsernameButton];


			targetWidth = LOGIN_BOX_WIDTH;
			targetHeight = 115 + messageSize;

			break;

		case CHANGEPASSWORD_STATE:

			[self setTitle:"<%= t(:change_password) %>"];

			[usernameField setHidden:YES];
			[passwordField setHidden:NO];
			[passwordConfirmField setHidden:NO];
			[emailField setHidden:YES];
			[registerButton setHidden:YES];
			[submitUsernameButton setHidden:YES];
			[newAccountButton setHidden:YES];
			[forgotPasswordButton setHidden:YES];
			[loginButton setHidden:YES];
			[changePasswordButton setHidden:NO];
			[cancelButton setHidden:NO];
			[spinnerView setHidden:YES];
			[logoutButton setHidden:YES];

			[passwordField setFrameOrigin:CGPointMake(10,10 + messageSize)];
			[passwordConfirmField setFrameOrigin:CGPointMake(10,40 + messageSize)];

			[changePasswordButton setFrame:CGRectMake(10, 80 + messageSize,(LOGIN_BOX_WIDTH - 30) / 2, [loginButton bounds].size.height)];
			[cancelButton setFrame:CGRectMake(LOGIN_BOX_WIDTH / 2 + 5, 80 + messageSize,(LOGIN_BOX_WIDTH - 30) / 2, [cancelButton bounds].size.height)];

			[self setDefaultButton: changePasswordButton];

			targetWidth = LOGIN_BOX_WIDTH;
			targetHeight = 115 + messageSize;

			break;

		case LOGOUT_STATE:

			[self setTitle:"<%= t(:logout) %>"];

			[usernameField setHidden:YES];
			[passwordField setHidden:YES];
			[passwordConfirmField setHidden:YES];
			[emailField setHidden:YES];
			[registerButton setHidden:YES];
			[submitUsernameButton setHidden:YES];
			[newAccountButton setHidden:YES];
			[forgotPasswordButton setHidden:YES];
			[loginButton setHidden:YES];
			[changePasswordButton setHidden:YES];
			[cancelButton setHidden:NO];
			[spinnerView setHidden:YES];
			[logoutButton setHidden:NO];

			[logoutButton setFrame:CGRectMake(10, 20 + messageSize, (LOGIN_BOX_WIDTH - 30) / 2, [logoutButton bounds].size.height)];
			[cancelButton setFrame:CGRectMake(205, 20 + messageSize, (LOGIN_BOX_WIDTH - 30) / 2, [cancelButton bounds].size.height)];

			[self setDefaultButton: logoutButton];

			targetWidth = LOGIN_BOX_WIDTH;
			targetHeight = 65 + messageSize;

			break;

		case WAITING_STATE:

			[self setTitle:"<%= t(:please_wait) %>"];

			[usernameField setHidden:YES];
			[passwordField setHidden:YES];
			[passwordConfirmField setHidden:YES];
			[emailField setHidden:YES];
			[registerButton setHidden:YES];
			[submitUsernameButton setHidden:YES];
			[newAccountButton setHidden:YES];
			[forgotPasswordButton setHidden:YES];
			[loginButton setHidden:YES];
			[changePasswordButton setHidden:YES];
			[cancelButton setHidden:YES];
			[spinnerView setHidden:NO];
			[logoutButton setHidden:YES];

			[spinnerView setFrameOrigin:CGPointMake(170, 30 + messageSize)];

			targetWidth = LOGIN_BOX_WIDTH;
			targetHeight = 115 + messageSize;

			break;
	}

	var xmargins = (targetWidth - [self frame].size.width) / 2;
	var ymargins = (targetHeight - [self frame].size.height) / 2;

	if([errors allObjects].length > 0)
	{
		[[self defaultButton] setEnabled:NO];
	}
	else
	{
		[[self defaultButton] setEnabled:YES];
	}

	[self setFrame:CGRectMake([self frame].origin.x - xmargins, [self frame].origin.y - ymargins, targetWidth, targetHeight)];
}

-(CPInteger)state
{
	return currentState;
}

+(CPInteger)loginState
{
	return LOGIN_STATE;
}

+(CPInteger)registrationState
{
	return REGISTRATION_STATE;
}

+(CPInteger)forgotPasswordState
{
	return FORGOTPASSWORD_STATE;
}

+(CPInteger)changePasswordState
{
	return CHANGEPASSWORD_STATE;
}

+(CPInteger)logoutState
{
	return LOGOUT_STATE;
}

+(CPInteger)waitingState
{
	return WAITING_STATE;
}

@end
