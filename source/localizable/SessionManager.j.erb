@import <Foundation/Foundation.j>

@import "SessionWindow.j"
@import "SessionMenuItem.j"

@import "Utils/HashFragment.j"
@import "Utils/URLQueryString.j"

var GITHUB_CLIENT_ID = "<%= config[:github_client_id] %>";
var apiServerUrl = "<%= config[:api_server_url] %>";
var session;

function popupwindow(url, title, w, h) {
  var left = (screen.width/2)-(w/2);
  var top = (screen.height/2)-(h/2);
  return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width='+w+', height='+h+', top='+top+', left='+left);
} 

@implementation SessionManager : CPWindowController
{
	CPString authToken;
    SEL currentResponseHandler;
    int currentStatusCode;
    CPString currentData;

    SessionMenuItem statusMenuItem;
}

-(id)init
{
	self = [super initWithWindow:[[SessionWindow alloc] init]];
	if (self)
	{
		/*persistjs*/
        [[self window] setDelegate:self];
		authToken = "";
        currentResponseHandler = @selector(noResponseHandler:data:)
        statusMenuItem = [[SessionMenuItem alloc] init];
        [statusMenuItem setTarget:self];
        [self getUserData];

        window.addEventListener('message', function (event) {
            try
            {
                var obj = [URLQueryString deserialize:event.data];
                [self handleSessionManagerMessage:obj];
            }
            catch (e)
            {
                CPLog("Received bad message");
            }
        });
	}
	return self;
}

-(void)handleSessionManagerMessage:(id)anObject
{
    console.log(anObject);
    if (anObject.type === "githubLogin")
    {
        if (anObject.authToken)
        {
            authToken = anObject.authToken;
            [self getUserData];
        }
        else if (anObject.error)
        {
            [self showLoginWindow];
            [[self window] setCustomError:[CPString stringWithFormat:"<%= t(:unable_to_github_login) %>", anObject.error]];
            [[self window] update];
        }
        else
        {
            console.log("wtf");
        }
    }

    // TODO: link accounts
}

-(id)menuItemClicked:(id)sender
{
    [self showLoginWindow];
    return sender;
}

-(void)getUserData
{
    if (authToken.length > 0)
    {
        currentResponseHandler = @selector(getUserDataHandler:forData:);
        [self get:"/sessions/current" andNotify:self];
    }
    else
    {
        [statusMenuItem setTitle:"<%= t(:login) %>"];
    }
}

-(void)nullResponseHandler:(int)statusCode forData:(CPString)data
{
}

-(void)getUserDataHandler:(int)statusCode forData:(CPString)data
{
    if (statusCode == 200)
    {
        var result = JSON.parse(data);
        [statusMenuItem setTitle:[CPString stringWithFormat:"<%= t(:logged_in_as) %>", result.username]];
    }
    else
    {
        [[self window] setState:[SessionWindow loginState] andResetFields:NO];
        [[self window] setCustomError:data];
        [[self window] update];
    }
}

-(void)validationResponseHandler:(int)statusCode forData:(CPString)data
{
    if (statusCode == 200)
    {
        var alert = [CPAlert alertWithError: [CPString stringWithFormat:"<%= t(:validation_pass) %>"]];
        [alert setAlertStyle:CPInformationalAlertStyle];
        [alert runModal];
    }
    else
    {
        var alert = [CPAlert alertWithError: [CPString stringWithFormat:"<%= t(:validation_fail) %>"]];
        [alert runModal];
    }
}

-(void)loginResponseHandler:(int)statusCode forData:(CPString)data
{
    if (statusCode == 200)
    {
        authToken = data;
        [[self window] close];
    }
    else
    {
        authToken = "";
        [[self window] setState:[SessionWindow loginState] andResetFields:NO];
        [[self window] setCustomError:data];
        [[self window] update];
    }
    [self getUserData];
}

-(void)registerResponseHandler:(int)statusCode forData:(CPString)data
{
    if (statusCode == 200)
    {
        [[self window] setState:[SessionWindow loginState]];
        [[self window] setCustomMessage:"<%= t(:registration_ok) %>"];
        [[self window] update];
    }
    else
    {
        [[self window] setState:[SessionWindow registrationState] andResetFields:NO];
        [[self window] setCustomError:data];
        [[self window] update];
    }
}

-(void)submitUsernameResponseHandler:(int)statusCode forData:(CPString)data
{
    if (statusCode == 200)
    {
        [[self window] setState:[SessionWindow loginState]];
        [[self window] setCustomMessage:"<%= t(:change_password_ok) %>"];
        [[self window] update];
    }
    else
    {
        [[self window] setState:[SessionWindow changePasswordState] andResetFields:NO];
        [[self window] setCustomError:data];
        [[self window] update];
    }
}

-(void)forgotPasswordResponseHandler:(int)statusCode forData:(CPString)data
{
    if (statusCode == 200)
    {
        [[self window] setState:[SessionWindow loginState]];
        [[self window] setCustomMessage:"<%= t(:forgot_password_ok) %>"];
        [[self window] update];
    }
    else
    {
        [[self window] setState:[SessionWindow forgotPasswordState] andResetFields:NO];
        [[self window] setCustomError:data];
        [[self window] update];
    }
}

-(CPURL)_buildUrl:(CPString)apiPath
{
    var query = {
        auth: authToken,
        lang: "<%= I18n.locale %>"
    };

    var url = [CPURL URLWithString:[CPString stringWithFormat:"%@%@?%@", apiServerUrl, apiPath, [URLQueryString serialize:query]]];

    return url;
}

-(id)get:(CPString)aUrl andNotify:(id)delegate
{
    var url = [self _buildUrl:aUrl];
    var request = [CPURLRequest requestWithURL:url];
    [request setHTTPMethod:"GET"];
    var conn = [CPURLConnection connectionWithRequest:request delegate:delegate];
}

-(id)post:(CPString)aUrl withData:(id)json andNotify:(id)delegate
{
    var url = [self _buildUrl:aUrl];
    var request = [CPURLRequest requestWithURL:url];
    [request setHTTPMethod:"POST"];
    [request setHTTPBody:JSON.stringify(json)];
    var conn = [CPURLConnection connectionWithRequest:request delegate:delegate];
}

-(id)put:(CPString)aUrl withData:(id)json andNotify:(id)delegate
{
    var url = [self _buildUrl:aUrl];
    var request = [CPURLRequest requestWithURL:url];
    [request setHTTPMethod:"PUT"];
    [request setHTTPBody:JSON.stringify(json)];
    var conn = [CPURLConnection connectionWithRequest:request delegate:delegate];
}

-(id)delete:(CPString)aUrl andNotify:(id)delegate
{
    var url = [self _buildUrl:aUrl];
    var request = [CPURLRequest requestWithURL:url];
    [request setHTTPMethod:"DELETE"];
    var conn = [CPURLConnection connectionWithRequest:request delegate:delegate];
}

-(void)loginWithUsername:(CPString)aUsername andPassword:(CPString)aPassword
{
    CPLog("Login: %@ %@", aUsername, aPassword);
    currentResponseHandler = @selector(loginResponseHandler:forData:)
	[self post:"/sessions" withData:{username: aUsername, password: aPassword /* captcha */} andNotify:self];
}

-(void)register:(CPString)aUsername withPassword:(CPString)aPassword andEmail:(CPString)anEmail
{
    CPLog("Register: %@ %@ %@", aUsername, aPassword, anEmail);
    currentResponseHandler = @selector(registerResponseHandler:forData:)
	[self post:"/users" withData:{username: aUsername, password: aPassword, email: anEmail /* captcha */} andNotify:self];
}

-(void)changePassword:(CPString)aPassword forUser:(CPString)aUsername
{
    var hash = [HashFragment fragmentAsObject];

    CPLog("ChangePassword: %@ %@ %@", hash.validateUsername, aPassword, hash.forgotPassword);
    currentResponseHandler = @selector(submitUsernameResponseHandler:forData:)
	[self post:"/users/" + hash.validateUsername + "/password" withData:{
                    name: hash.validateUsername,
                password: aPassword,
         validationToken: hash.forgotPassword

    } andNotify:self];
}

-(void)requestForgottenPasswordForUser:(CPString)aUsername andEmail:(CPString)anEmail
{
    CPLog("ForgotPassword: %@ %@", aUsername, anEmail);
    currentResponseHandler = @selector(forgotPasswordResponseHandler:forData:)
	[self post:"/users/" + aUsername + "/forgotPassword" withData:{
            name:aUsername,
           email:anEmail
    } andNotify:self];
}

-(void)validateUser:(CPString)aUsername withToken:(CPString)aToken
{
    CPLog("Validating User: %@ %@", aUsername, aToken);
    currentResponseHandler = @selector(validationResponseHandler:forData:)
    [self post:"/users/" + aUsername + "/validation" withData:{
                   name: aUsername,
        validationToken: aToken
    } andNotify:self];
}

-(void)logout
{
    CPLog("Logout");
    currentResponseHandler = @selector(nullResponseHandler:forData:)
    [self delete:"/sessions/current" andNotify:self];
    authToken = "";
    [self getUserData];
}

-(void)connection:(CPURLConnection)connection didFailWithError:(id)error
{
    CPLog("Error: %@", error);
}

-(void)connection:(CPURLConnection)connection didReceiveResponse:(CPHTTPURLResponse)response
{
    currentStatusCode = [response statusCode];
}

-(void)connection:(CPURLConnection)connection didReceiveData:(CPString)data
{
    currentData = data;
}

-(void)connectionDidFinishLoading:(CPURLConnection)connection
{
    [self performSelector:currentResponseHandler withObject:currentStatusCode withObject:currentData];
}

-(void)connectionDidReceiveAuthenticationChallenge:(id)connection
{
    authToken = "";
    [self getUserData];
    [self showLoginWindow];
    [[self window] setCustomMessage:"<%= t(:login_required) %>"];
    [[self window] update];
}

-(void)loginWithGithub
{
    var queryString = [URLQueryString serialize:
    {
        client_id: GITHUB_CLIENT_ID,
            scope: "gist,user:email"
    }];

    var request = [CPString stringWithFormat:"https://github.com/login/oauth/authorize?%@", queryString];

    popupwindow(request, "asd", 1024, 768);

}

-(void)showLoginWindow
{
    if (authToken.length == 0)
    {
        [self showWindow:self];
        [[self window] setState:[SessionWindow loginState]];
    }
    else
    {
        [self showWindow:self];
        [[self window] setState:[SessionWindow logoutState]];
    }
}

-(void)showChangePasswordWindow
{
    [self showWindow:self];
    [[self window] setState:[SessionWindow changePasswordState]];
}

-(id)loginButtonClicked:(id)sender
{
    [self loginWithUsername:[[self window] username] andPassword:[[self window] password]];
    [[self window] setState:[SessionWindow waitingState]];
}

-(id)logoutButtonClicked:(id)sender
{
    [self logout];
    [[self window] close];
}

-(id)registerButtonClicked:(id)sender
{
    [self register:[[self window] username] withPassword:[[self window] password] andEmail:[[self window] email]];
    [[self window] setState:[SessionWindow waitingState]];
}

-(id)submitUsernameButtonClicked:(id)sender
{
    [self requestForgottenPasswordForUser:[[self window] username] andEmail:[[self window] email]];
    [[self window] setState:[SessionWindow waitingState]];
}

-(id)changePasswordButtonClicked:(id)sender
{
    [self changePassword:[[self window] password] forUser:[[self window] username]];
    [[self window] setState:[SessionWindow waitingState]];
}

-(SessionMenuItem)sessionStatusMenuItem
{
    return statusMenuItem;
}

+(SessionManager)instance
{
	if (!session)
	{
		session = [[SessionManager alloc] init];
        [CPURLConnection setClassDelegate:session];
	}
	return session;
}

@end

